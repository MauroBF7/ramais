1736123416
0cc1308022480e537afa03931d99722c-phpdoc%3A6ee619a90162c294a50c9508e088c975-49b1ea3cb395175217626bf7e9e53869
s:9888:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxNDp7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lIjtzOjE0OiJwZXJtaXNzaW9uLnBocCI7czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBuYW1lc3BhY2VzIjthOjA6e31zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGluY2x1ZGVzIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGZ1bmN0aW9ucyI7YTowOnt9czo0NDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjb25zdGFudHMiO2E6MDp7fXM6NDI6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAY2xhc3NlcyI7YTowOnt9czo0NToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBpbnRlcmZhY2VzIjthOjA6e31zOjQxOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAHRyYWl0cyI7YTowOnt9czo0MDoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBlbnVtcyI7YTowOnt9czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBoYXNoIjtzOjMyOiI0OWIxZWEzY2IzOTUxNzUyMTc2MjZiZjdlOWU1Mzg2OSI7czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBwYXRoIjtzOjIxOiJjb25maWcvcGVybWlzc2lvbi5waHAiO3M6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAc291cmNlIjtzOjY1MTE6Ijw/cGhwCgpyZXR1cm4gWwoKICAgICdtb2RlbHMnID0+IFsKCiAgICAgICAgLyoKICAgICAgICAgKiBXaGVuIHVzaW5nIHRoZSAiSGFzUGVybWlzc2lvbnMiIHRyYWl0IGZyb20gdGhpcyBwYWNrYWdlLCB3ZSBuZWVkIHRvIGtub3cgd2hpY2gKICAgICAgICAgKiBFbG9xdWVudCBtb2RlbCBzaG91bGQgYmUgdXNlZCB0byByZXRyaWV2ZSB5b3VyIHBlcm1pc3Npb25zLiBPZiBjb3Vyc2UsIGl0CiAgICAgICAgICogaXMgb2Z0ZW4ganVzdCB0aGUgIlBlcm1pc3Npb24iIG1vZGVsIGJ1dCB5b3UgbWF5IHVzZSB3aGF0ZXZlciB5b3UgbGlrZS4KICAgICAgICAgKgogICAgICAgICAqIFRoZSBtb2RlbCB5b3Ugd2FudCB0byB1c2UgYXMgYSBQZXJtaXNzaW9uIG1vZGVsIG5lZWRzIHRvIGltcGxlbWVudCB0aGUKICAgICAgICAgKiBgU3BhdGllXFBlcm1pc3Npb25cQ29udHJhY3RzXFBlcm1pc3Npb25gIGNvbnRyYWN0LgogICAgICAgICAqLwoKICAgICAgICAncGVybWlzc2lvbicgPT4gU3BhdGllXFBlcm1pc3Npb25cTW9kZWxzXFBlcm1pc3Npb246OmNsYXNzLAoKICAgICAgICAvKgogICAgICAgICAqIFdoZW4gdXNpbmcgdGhlICJIYXNSb2xlcyIgdHJhaXQgZnJvbSB0aGlzIHBhY2thZ2UsIHdlIG5lZWQgdG8ga25vdyB3aGljaAogICAgICAgICAqIEVsb3F1ZW50IG1vZGVsIHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIHlvdXIgcm9sZXMuIE9mIGNvdXJzZSwgaXQKICAgICAgICAgKiBpcyBvZnRlbiBqdXN0IHRoZSAiUm9sZSIgbW9kZWwgYnV0IHlvdSBtYXkgdXNlIHdoYXRldmVyIHlvdSBsaWtlLgogICAgICAgICAqCiAgICAgICAgICogVGhlIG1vZGVsIHlvdSB3YW50IHRvIHVzZSBhcyBhIFJvbGUgbW9kZWwgbmVlZHMgdG8gaW1wbGVtZW50IHRoZQogICAgICAgICAqIGBTcGF0aWVcUGVybWlzc2lvblxDb250cmFjdHNcUm9sZWAgY29udHJhY3QuCiAgICAgICAgICovCgogICAgICAgICdyb2xlJyA9PiBTcGF0aWVcUGVybWlzc2lvblxNb2RlbHNcUm9sZTo6Y2xhc3MsCgogICAgXSwKCiAgICAndGFibGVfbmFtZXMnID0+IFsKCiAgICAgICAgLyoKICAgICAgICAgKiBXaGVuIHVzaW5nIHRoZSAiSGFzUm9sZXMiIHRyYWl0IGZyb20gdGhpcyBwYWNrYWdlLCB3ZSBuZWVkIHRvIGtub3cgd2hpY2gKICAgICAgICAgKiB0YWJsZSBzaG91bGQgYmUgdXNlZCB0byByZXRyaWV2ZSB5b3VyIHJvbGVzLiBXZSBoYXZlIGNob3NlbiBhIGJhc2ljCiAgICAgICAgICogZGVmYXVsdCB2YWx1ZSBidXQgeW91IG1heSBlYXNpbHkgY2hhbmdlIGl0IHRvIGFueSB0YWJsZSB5b3UgbGlrZS4KICAgICAgICAgKi8KCiAgICAgICAgJ3JvbGVzJyA9PiAncm9sZXMnLAoKICAgICAgICAvKgogICAgICAgICAqIFdoZW4gdXNpbmcgdGhlICJIYXNQZXJtaXNzaW9ucyIgdHJhaXQgZnJvbSB0aGlzIHBhY2thZ2UsIHdlIG5lZWQgdG8ga25vdyB3aGljaAogICAgICAgICAqIHRhYmxlIHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIHlvdXIgcGVybWlzc2lvbnMuIFdlIGhhdmUgY2hvc2VuIGEgYmFzaWMKICAgICAgICAgKiBkZWZhdWx0IHZhbHVlIGJ1dCB5b3UgbWF5IGVhc2lseSBjaGFuZ2UgaXQgdG8gYW55IHRhYmxlIHlvdSBsaWtlLgogICAgICAgICAqLwoKICAgICAgICAncGVybWlzc2lvbnMnID0+ICdwZXJtaXNzaW9ucycsCgogICAgICAgIC8qCiAgICAgICAgICogV2hlbiB1c2luZyB0aGUgIkhhc1Blcm1pc3Npb25zIiB0cmFpdCBmcm9tIHRoaXMgcGFja2FnZSwgd2UgbmVlZCB0byBrbm93IHdoaWNoCiAgICAgICAgICogdGFibGUgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgeW91ciBtb2RlbHMgcGVybWlzc2lvbnMuIFdlIGhhdmUgY2hvc2VuIGEKICAgICAgICAgKiBiYXNpYyBkZWZhdWx0IHZhbHVlIGJ1dCB5b3UgbWF5IGVhc2lseSBjaGFuZ2UgaXQgdG8gYW55IHRhYmxlIHlvdSBsaWtlLgogICAgICAgICAqLwoKICAgICAgICAnbW9kZWxfaGFzX3Blcm1pc3Npb25zJyA9PiAnbW9kZWxfaGFzX3Blcm1pc3Npb25zJywKCiAgICAgICAgLyoKICAgICAgICAgKiBXaGVuIHVzaW5nIHRoZSAiSGFzUm9sZXMiIHRyYWl0IGZyb20gdGhpcyBwYWNrYWdlLCB3ZSBuZWVkIHRvIGtub3cgd2hpY2gKICAgICAgICAgKiB0YWJsZSBzaG91bGQgYmUgdXNlZCB0byByZXRyaWV2ZSB5b3VyIG1vZGVscyByb2xlcy4gV2UgaGF2ZSBjaG9zZW4gYQogICAgICAgICAqIGJhc2ljIGRlZmF1bHQgdmFsdWUgYnV0IHlvdSBtYXkgZWFzaWx5IGNoYW5nZSBpdCB0byBhbnkgdGFibGUgeW91IGxpa2UuCiAgICAgICAgICovCgogICAgICAgICdtb2RlbF9oYXNfcm9sZXMnID0+ICdtb2RlbF9oYXNfcm9sZXMnLAoKICAgICAgICAvKgogICAgICAgICAqIFdoZW4gdXNpbmcgdGhlICJIYXNSb2xlcyIgdHJhaXQgZnJvbSB0aGlzIHBhY2thZ2UsIHdlIG5lZWQgdG8ga25vdyB3aGljaAogICAgICAgICAqIHRhYmxlIHNob3VsZCBiZSB1c2VkIHRvIHJldHJpZXZlIHlvdXIgcm9sZXMgcGVybWlzc2lvbnMuIFdlIGhhdmUgY2hvc2VuIGEKICAgICAgICAgKiBiYXNpYyBkZWZhdWx0IHZhbHVlIGJ1dCB5b3UgbWF5IGVhc2lseSBjaGFuZ2UgaXQgdG8gYW55IHRhYmxlIHlvdSBsaWtlLgogICAgICAgICAqLwoKICAgICAgICAncm9sZV9oYXNfcGVybWlzc2lvbnMnID0+ICdyb2xlX2hhc19wZXJtaXNzaW9ucycsCiAgICBdLAoKICAgICdjb2x1bW5fbmFtZXMnID0+IFsKICAgICAgICAvKgogICAgICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdSB3YW50IHRvIG5hbWUgdGhlIHJlbGF0ZWQgcGl2b3RzIG90aGVyIHRoYW4gZGVmYXVsdHMKICAgICAgICAgKi8KICAgICAgICAncm9sZV9waXZvdF9rZXknID0+IG51bGwsIC8vZGVmYXVsdCAncm9sZV9pZCcsCiAgICAgICAgJ3Blcm1pc3Npb25fcGl2b3Rfa2V5JyA9PiBudWxsLCAvL2RlZmF1bHQgJ3Blcm1pc3Npb25faWQnLAoKICAgICAgICAvKgogICAgICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdSB3YW50IHRvIG5hbWUgdGhlIHJlbGF0ZWQgbW9kZWwgcHJpbWFyeSBrZXkgb3RoZXIgdGhhbgogICAgICAgICAqIGBtb2RlbF9pZGAuCiAgICAgICAgICoKICAgICAgICAgKiBGb3IgZXhhbXBsZSwgdGhpcyB3b3VsZCBiZSBuaWNlIGlmIHlvdXIgcHJpbWFyeSBrZXlzIGFyZSBhbGwgVVVJRHMuIEluCiAgICAgICAgICogdGhhdCBjYXNlLCBuYW1lIHRoaXMgYG1vZGVsX3V1aWRgLgogICAgICAgICAqLwoKICAgICAgICAnbW9kZWxfbW9ycGhfa2V5JyA9PiAnbW9kZWxfaWQnLAoKICAgICAgICAvKgogICAgICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdSB3YW50IHRvIHVzZSB0aGUgdGVhbXMgZmVhdHVyZSBhbmQgeW91ciByZWxhdGVkIG1vZGVsJ3MKICAgICAgICAgKiBmb3JlaWduIGtleSBpcyBvdGhlciB0aGFuIGB0ZWFtX2lkYC4KICAgICAgICAgKi8KCiAgICAgICAgJ3RlYW1fZm9yZWlnbl9rZXknID0+ICd0ZWFtX2lkJywKICAgIF0sCgogICAgLyoKICAgICAqIFdoZW4gc2V0IHRvIHRydWUsIHRoZSBtZXRob2QgZm9yIGNoZWNraW5nIHBlcm1pc3Npb25zIHdpbGwgYmUgcmVnaXN0ZXJlZCBvbiB0aGUgZ2F0ZS4KICAgICAqIFNldCB0aGlzIHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIGltcGxlbWVudCBjdXN0b20gbG9naWMgZm9yIGNoZWNraW5nIHBlcm1pc3Npb25zLgogICAgICovCgogICAgJ3JlZ2lzdGVyX3Blcm1pc3Npb25fY2hlY2tfbWV0aG9kJyA9PiB0cnVlLAoKICAgIC8qCiAgICAgKiBXaGVuIHNldCB0byB0cnVlLCBMYXJhdmVsXE9jdGFuZVxFdmVudHNcT3BlcmF0aW9uVGVybWluYXRlZCBldmVudCBsaXN0ZW5lciB3aWxsIGJlIHJlZ2lzdGVyZWQKICAgICAqIHRoaXMgd2lsbCByZWZyZXNoIHBlcm1pc3Npb25zIG9uIGV2ZXJ5IFRpY2tUZXJtaW5hdGVkLCBUYXNrVGVybWluYXRlZCBhbmQgUmVxdWVzdFRlcm1pbmF0ZWQKICAgICAqIE5PVEU6IFRoaXMgc2hvdWxkIG5vdCBiZSBuZWVkZWQgaW4gbW9zdCBjYXNlcywgYnV0IGFuIE9jdGFuZS9WYXBvciBjb21iaW5hdGlvbiBiZW5lZml0ZWQgZnJvbSBpdC4KICAgICAqLwogICAgJ3JlZ2lzdGVyX29jdGFuZV9yZXNldF9saXN0ZW5lcicgPT4gZmFsc2UsCgogICAgLyoKICAgICAqIFRlYW1zIEZlYXR1cmUuCiAgICAgKiBXaGVuIHNldCB0byB0cnVlIHRoZSBwYWNrYWdlIGltcGxlbWVudHMgdGVhbXMgdXNpbmcgdGhlICd0ZWFtX2ZvcmVpZ25fa2V5Jy4KICAgICAqIElmIHlvdSB3YW50IHRoZSBtaWdyYXRpb25zIHRvIHJlZ2lzdGVyIHRoZSAndGVhbV9mb3JlaWduX2tleScsIHlvdSBtdXN0CiAgICAgKiBzZXQgdGhpcyB0byB0cnVlIGJlZm9yZSBkb2luZyB0aGUgbWlncmF0aW9uLgogICAgICogSWYgeW91IGFscmVhZHkgZGlkIHRoZSBtaWdyYXRpb24gdGhlbiB5b3UgbXVzdCBtYWtlIGEgbmV3IG1pZ3JhdGlvbiB0byBhbHNvCiAgICAgKiBhZGQgJ3RlYW1fZm9yZWlnbl9rZXknIHRvICdyb2xlcycsICdtb2RlbF9oYXNfcm9sZXMnLCBhbmQgJ21vZGVsX2hhc19wZXJtaXNzaW9ucycKICAgICAqICh2aWV3IHRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGlzIHBhY2thZ2UncyBtaWdyYXRpb24gZmlsZSkKICAgICAqLwoKICAgICd0ZWFtcycgPT4gZmFsc2UsCgogICAgLyoKICAgICAqIFBhc3Nwb3J0IENsaWVudCBDcmVkZW50aWFscyBHcmFudAogICAgICogV2hlbiBzZXQgdG8gdHJ1ZSB0aGUgcGFja2FnZSB3aWxsIHVzZSBQYXNzcG9ydHMgQ2xpZW50IHRvIGNoZWNrIHBlcm1pc3Npb25zCiAgICAgKi8KCiAgICAndXNlX3Bhc3Nwb3J0X2NsaWVudF9jcmVkZW50aWFscycgPT4gZmFsc2UsCgogICAgLyoKICAgICAqIFdoZW4gc2V0IHRvIHRydWUsIHRoZSByZXF1aXJlZCBwZXJtaXNzaW9uIG5hbWVzIGFyZSBhZGRlZCB0byBleGNlcHRpb24gbWVzc2FnZXMuCiAgICAgKiBUaGlzIGNvdWxkIGJlIGNvbnNpZGVyZWQgYW4gaW5mb3JtYXRpb24gbGVhayBpbiBzb21lIGNvbnRleHRzLCBzbyB0aGUgZGVmYXVsdAogICAgICogc2V0dGluZyBpcyBmYWxzZSBoZXJlIGZvciBvcHRpbXVtIHNhZmV0eS4KICAgICAqLwoKICAgICdkaXNwbGF5X3Blcm1pc3Npb25faW5fZXhjZXB0aW9uJyA9PiBmYWxzZSwKCiAgICAvKgogICAgICogV2hlbiBzZXQgdG8gdHJ1ZSwgdGhlIHJlcXVpcmVkIHJvbGUgbmFtZXMgYXJlIGFkZGVkIHRvIGV4Y2VwdGlvbiBtZXNzYWdlcy4KICAgICAqIFRoaXMgY291bGQgYmUgY29uc2lkZXJlZCBhbiBpbmZvcm1hdGlvbiBsZWFrIGluIHNvbWUgY29udGV4dHMsIHNvIHRoZSBkZWZhdWx0CiAgICAgKiBzZXR0aW5nIGlzIGZhbHNlIGhlcmUgZm9yIG9wdGltdW0gc2FmZXR5LgogICAgICovCgogICAgJ2Rpc3BsYXlfcm9sZV9pbl9leGNlcHRpb24nID0+IGZhbHNlLAoKICAgIC8qCiAgICAgKiBCeSBkZWZhdWx0IHdpbGRjYXJkIHBlcm1pc3Npb24gbG9va3VwcyBhcmUgZGlzYWJsZWQuCiAgICAgKiBTZWUgZG9jdW1lbnRhdGlvbiB0byB1bmRlcnN0YW5kIHN1cHBvcnRlZCBzeW50YXguCiAgICAgKi8KCiAgICAnZW5hYmxlX3dpbGRjYXJkX3Blcm1pc3Npb24nID0+IGZhbHNlLAoKICAgIC8qCiAgICAgKiBUaGUgY2xhc3MgdG8gdXNlIGZvciBpbnRlcnByZXRpbmcgd2lsZGNhcmQgcGVybWlzc2lvbnMuCiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgZGVsaW1pdGVycywgb3ZlcnJpZGUgdGhlIGNsYXNzIGFuZCBzcGVjaWZ5IGl0cyBuYW1lIGhlcmUuCiAgICAgKi8KICAgIC8vICdwZXJtaXNzaW9uLndpbGRjYXJkX3Blcm1pc3Npb24nID0+IFNwYXRpZVxQZXJtaXNzaW9uXFdpbGRjYXJkUGVybWlzc2lvbjo6Y2xhc3MsCgogICAgLyogQ2FjaGUtc3BlY2lmaWMgc2V0dGluZ3MgKi8KCiAgICAnY2FjaGUnID0+IFsKCiAgICAgICAgLyoKICAgICAgICAgKiBCeSBkZWZhdWx0IGFsbCBwZXJtaXNzaW9ucyBhcmUgY2FjaGVkIGZvciAyNCBob3VycyB0byBzcGVlZCB1cCBwZXJmb3JtYW5jZS4KICAgICAgICAgKiBXaGVuIHBlcm1pc3Npb25zIG9yIHJvbGVzIGFyZSB1cGRhdGVkIHRoZSBjYWNoZSBpcyBmbHVzaGVkIGF1dG9tYXRpY2FsbHkuCiAgICAgICAgICovCgogICAgICAgICdleHBpcmF0aW9uX3RpbWUnID0+IFxEYXRlSW50ZXJ2YWw6OmNyZWF0ZUZyb21EYXRlU3RyaW5nKCcyNCBob3VycycpLAoKICAgICAgICAvKgogICAgICAgICAqIFRoZSBjYWNoZSBrZXkgdXNlZCB0byBzdG9yZSBhbGwgcGVybWlzc2lvbnMuCiAgICAgICAgICovCgogICAgICAgICdrZXknID0+ICdzcGF0aWUucGVybWlzc2lvbi5jYWNoZScsCgogICAgICAgIC8qCiAgICAgICAgICogWW91IG1heSBvcHRpb25hbGx5IGluZGljYXRlIGEgc3BlY2lmaWMgY2FjaGUgZHJpdmVyIHRvIHVzZSBmb3IgcGVybWlzc2lvbiBhbmQKICAgICAgICAgKiByb2xlIGNhY2hpbmcgdXNpbmcgYW55IG9mIHRoZSBgc3RvcmVgIGRyaXZlcnMgbGlzdGVkIGluIHRoZSBjYWNoZS5waHAgY29uZmlnCiAgICAgICAgICogZmlsZS4gVXNpbmcgJ2RlZmF1bHQnIGhlcmUgbWVhbnMgdG8gdXNlIHRoZSBgZGVmYXVsdGAgc2V0IGluIGNhY2hlLnBocC4KICAgICAgICAgKi8KCiAgICAgICAgJ3N0b3JlJyA9PiAnZGVmYXVsdCcsCiAgICBdLApdOwoiO3M6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZG9jQmxvY2siO047czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBtZXRhZGF0YSI7YTowOnt9fQ==";